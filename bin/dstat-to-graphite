#!/usr/bin/env python

"""dstat-to-graphite

Usage:
  dstat-to-graphite <ssh-host> <graphite-host>

"""
from docopt import docopt
import subprocess
import fileinput
import re
from collections import OrderedDict
import csv
import socket
import time
import struct
import pickle

METRIC_NAMES = {
  'usr': 'cpu.user',
  'sys': 'cpu.system',
  'idl': 'cpu.idle',
  'wai': 'cpu.wait',
  'hiq': 'cpu.hiq',
  'siq': 'cpu.siq',
  'read': 'disk.read',
  'writ': 'disk.write',
  'recv': 'net.recv',
  'send': 'net.send',
  'in': 'paging.in',
  'out': 'paging.out',
  'int': 'system.interrupts',
  'csw': 'system.context_switches',
}


def send_metrics_to_graphite(sock, metrics, now):
  tuples = ([])
  for k, v in metrics.iteritems():
    tuples.append((k, (now, v)))
  package = pickle.dumps(tuples, 1)
  size = struct.pack('!L', len(package))
  sock.sendall(size)
  sock.sendall(package)


def run(ssh_host, graphite_host):
  bash_cmd = 'hostname; pkill dstat; rm /tmp/dstat_output; touch /tmp/dstat_output && (dstat --output /tmp/dstat_output 10 > /dev/null & tail -n100 -f /tmp/dstat_output)'
  proc = subprocess.Popen(['ssh', ssh_host, 'bash', '-c', bash_cmd], stdout=subprocess.PIPE)
  r = csv.reader(iter(proc.stdout.readline, ''))

  # first line is output of `hostname`
  hostname = next(r)[0]
  print('hostname: ' + hostname)

  # dstat header
  assert not next(r)
  assert not next(r)
  assert next(r)[0] == 'Host:'
  assert next(r)[0] == 'Cmdline:'
  assert not next(r)
  assert next(r)
  column_names = next(r)

  graphite_sock = socket.socket()
  graphite_sock.connect((graphite_host, 2004))

  for row in r:
    now = time.time()
    metrics = OrderedDict()
    for column_name, value in zip(column_names, row):
      metric_name = 'dstat.' + hostname.replace('.', '_') + '.' + METRIC_NAMES[column_name]
      metrics[metric_name] = value
    send_metrics_to_graphite(graphite_sock, metrics, now)


if __name__ == '__main__':
  args = docopt(__doc__)
  run(args['<ssh-host>'], args['<graphite-host>'])
